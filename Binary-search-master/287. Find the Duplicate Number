给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。

题解：
    本题可以使用抽屉法，因为数字都在1到n之间，有n+1个数，那么就必然有一个数是重复的，此时我们使用二分法，统计一下中间那个数左半边所有数的个数，如果个数大于
    区间的一半，则证明重复的数就在左半边，则继续重复二分左半边，同理，如果不大于区间的一半，则右边所有数的个数一定大于区间的一半，此时重复遍历右半边，直到
    最后得出重复的那个数

代码：

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size() - 1;
        int l = 1, r = n;
        while(l < r)
        {
            int mid = l + r >> 1;
            int cnt = 0;
            for(auto x: nums)
            {
                if(x >= l && x <= mid)
                    cnt++;
            }
            if(cnt > mid - l + 1)
                r = mid;
            else
                l = mid + 1;
        }
        return r;
    }
};
